# Dual Encoder based on mT5 Base model.
# Provides MODEL
from __gin__ import dynamic_registration

import seqio
from t5x import adafactor
from t5x_retrieval import feature_converters
from t5x_retrieval import models as models
from t5x_retrieval import losses

ARCHITECTURE = %gin.REQUIRED
T5XR_INFERENCE_MODE = 'encode'
LOSS_MODULE = @losses.InBatchCrossEntropyLoss

# MT5 is identical to t5.1.1 architecture except for the vocabulary.
include 't5x_retrieval/configs/architectures/de_t5_1_1_flaxformer.gin'
NUM_EMBEDDINGS = 250112  # vocab size rounded to a multiple of 128 for TPU efficiency

# Architecture overrides
NUM_HEADS = 12
NUM_LAYERS = 12
HEAD_DIM = 64
EMBED_DIM = 768
MLP_DIM = 2048
PROJECTION_DIM = 768

# Vocabulary (shared by encoder and decoder)
VOCABULARY = @seqio.SentencePieceVocabulary()
seqio.SentencePieceVocabulary.sentencepiece_model_file = "gs://t5-data/vocabs/mc4.250000.100extra/sentencepiece.model"

# Optimizer
# `learning_rate` is set by `Trainer.learning_rate_fn`.
OPTIMIZER = @adafactor.Adafactor()
adafactor.Adafactor:
  decay_rate = 0.8
  step_offset = 0

# Model
MODEL = @models.DualEncoderModel()
models.DualEncoderModel:
  use_negatives = False
  use_align_uniform = False
  inference_mode = %T5XR_INFERENCE_MODE
  feature_converter_cls = @feature_converters.DualEncoderFeatureConverterFactory()
  module = %ARCHITECTURE  # provided by t5_flaxformer
  loss_module_factory = %LOSS_MODULE
  input_vocabulary = %VOCABULARY
  output_vocabulary = %VOCABULARY
  optimizer_def = %OPTIMIZER
