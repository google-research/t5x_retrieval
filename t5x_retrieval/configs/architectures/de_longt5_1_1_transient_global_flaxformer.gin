# Flaxformer implementation of Long Dual Encoder, based on LongT5 architecture.
#
# Required to be overridden:
#
# - NUM_HEADS
# - NUM_LAYERS
# - HEAD_DIM
# - EMBED_DIM
# - MLP_DIM
from __gin__ import dynamic_registration

from flax import linen
from flaxformer.architectures.dual_encoder import dual_encoder_architecture
from flaxformer.architectures.dual_encoder import l2_norm
from flaxformer.architectures.dual_encoder import poolings
from flaxformer.architectures.dual_encoder import similarity_functions
from flaxformer.architectures.longt5 import long_attention
from flaxformer.architectures.longt5 import longt5_architecture
from flaxformer.architectures.longt5 import relative_position_biases_general
from flaxformer.components import dense
from flaxformer.components import embedding
from flaxformer.components import layer_norm
from flaxformer.components import relative_position_biases

from t5x_retrieval import feature_converters


NUM_LAYERS = %gin.REQUIRED
NUM_HEADS = %gin.REQUIRED
HEAD_DIM = %gin.REQUIRED
EMBED_DIM = %gin.REQUIRED
MLP_DIM = %gin.REQUIRED


ACTIVATION_DTYPE = 'bfloat16'
ACTIVATION_PARTITIONING_DIMS = 1
SCALE = 1.0
DROPOUT_RATE = 0.0
LOCAL_RADIUS = 127
TOKENS_PER_BLOCK = 16

# Macros
BIAS_INIT = @bias_init/linen.initializers.normal()
bias_init/linen.initializers.normal.stddev = 1e-6
DROPOUT_FACTORY = @dropout_factory/linen.Dropout
dropout_factory/linen.Dropout:
  rate = %DROPOUT_RATE
  broadcast_dims = (-2,)

# Architecture (Flax Module)
ARCHITECTURE = @dual_encoder_architecture.LongDualEncoder()
dual_encoder_architecture.LongDualEncoder:
  encoder_factory = @longt5_architecture.LongEncoder
  pooler_factory = @poolings.MeanPooling
  shared_token_embedder_factory = @embedding.Embed
  l2_norm_factory = @l2_norm.L2Norm
  projection_layer_factory = @projection_layer/dense.DenseGeneral
  similarity_layer_factory = @similarity_functions.BatchDotProduct
  dtype = %ACTIVATION_DTYPE

# Encoder
longt5_architecture.LongEncoder:
  num_layers = %NUM_LAYERS
  layer_factory = @longt5_architecture.LongEncoderLayer
  input_dropout_factory = %DROPOUT_FACTORY
  output_dropout_factory = %DROPOUT_FACTORY
  layer_norm_factory = @layer_norm.T5LayerNorm
  position_embedder_factory = None
  shared_relpos_bias_factory = @relative_position_biases_general.RelativePositionBiasesGeneral
  shared_side_relpos_bias_factory = @relative_position_biases_general.RelativePositionBiasesGeneral
  dtype = %ACTIVATION_DTYPE

# Infer the input features from the TASK_FEATURE_LENGTHS passed by the user.
feature_converters.DualEncoderFeatureConverterFactory:
  feature_specs = (
      ("inputs", "int32", 1, 0),
      ("targets", "int32", 1, 0),
  )

# Similarity layer
similarity_functions.BatchDotProduct:
  name = 'batch_dot_product'

# Projection layer
projection_layer/dense.DenseGeneral:
  features = %PROJECTION_DIM
  use_bias = False
  dtype = 'float32'
  kernel_init = @projection_layer/linen.initializers.variance_scaling()
  kernel_axis_names = ('embed', 'affinity')
  bias_init = %BIAS_INIT
projection_layer/linen.initializers.variance_scaling:
  scale = 1
  mode = 'fan_in'
  distribution = 'truncated_normal'

# Encoder Layer
longt5_architecture.LongEncoderLayer:
  attention_factory = @long_attention.EtcTransientGlobalSelfAttention
  mlp = @dense.MlpBlock()
  dropout_factory = %DROPOUT_FACTORY
  layer_norm_factory = @layer_norm.T5LayerNorm
  activation_partitioning_dims = %ACTIVATION_PARTITIONING_DIMS

# Long Attention (encoder, self-attention)
long_attention.EtcTransientGlobalSelfAttention:
  num_heads = %NUM_HEADS
  tokens_per_block = %TOKENS_PER_BLOCK
  local_radius = %LOCAL_RADIUS
  dtype = %ACTIVATION_DTYPE
  head_dim = %HEAD_DIM
  kernel_init =  @attention_kernel_init/linen.initializers.variance_scaling()
  bias_init = %BIAS_INIT
  use_bias = False
  broadcast_dropout = True
  dropout_rate = %DROPOUT_RATE
attention_kernel_init/linen.initializers.variance_scaling:
  scale = %SCALE
  mode = 'fan_in'
  distribution = 'normal'

# Relative position biases (encoder)
relative_position_biases_general.RelativePositionBiasesGeneral:
  num_heads = %NUM_HEADS
  dtype = %ACTIVATION_DTYPE
  num_buckets = 32
  max_distance = 128
  embedding_init = @relative_position_bias_init/linen.initializers.variance_scaling()
relative_position_bias_init/linen.initializers.variance_scaling:
  scale = %SCALE
  mode = 'fan_avg'
  distribution = 'uniform'

# Token Embedder (shared)
embedding.Embed:
  num_embeddings= %NUM_EMBEDDINGS
  features = %EMBED_DIM
  cast_input_dtype = 'int32'
  dtype = %ACTIVATION_DTYPE
  attend_dtype = 'float32'  # for logit training stability
  one_hot = True
  embedding_init = @token_embedder_init/linen.initializers.normal()
  name = 'token_embedder'
token_embedder_init/linen.initializers.normal.stddev = 1.0

dense.MlpBlock:
  use_bias = False
  intermediate_dim = %MLP_DIM
  activations = ('gelu', 'linear')
  kernel_init = @mlp_kernel_init/linen.initializers.variance_scaling()
  bias_init = %BIAS_INIT
  intermediate_dropout_rate = %DROPOUT_RATE
  final_dropout_rate = 0
  dtype = %ACTIVATION_DTYPE
mlp_kernel_init/linen.initializers.variance_scaling:
  scale = 1.0
  mode = 'fan_in'
  distribution = 'truncated_normal'
